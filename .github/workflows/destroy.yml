name: Infrastructure [Destroy]

on:
  workflow_dispatch:
    inputs:
      run_destroy:
        description: 'Run the destroy job?'
        required: false
        default: 'false'

permissions:
  id-token: write
  contents: read

jobs:
  setup:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}          # <-- Use environment secrets here
    container:
      image: ghcr.io/opentofu/opentofu:1.9.0
    strategy:
      matrix:
        include:
          - environment: development
            variables:
              TF_VAR_ENV: dev
          # - environment: production
          #   variables:
          #     TF_VAR_ENV: prod
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Set up Tofu
        run: |
          echo "Setting up Tofu for environment: ${{ matrix.environment }}"
          tofu --version
          pwd

      - name: Tofu Format
        run: |
          echo "Running Tofu Format"
          if tofu fmt -check --recursive; then
            echo "Tofu Format check passed"
          else
            echo "Tofu Format check failed"
            exit 1
          fi
          echo "Tofu Format completed successfully"

      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACCESS_ROLE }} # Use a secret for the role ARN
          role-session-name: Github
          aws-region: ${{ vars.AWS_REGION }}

  initialize:
    if: github.ref == 'refs/heads/main'
    needs: setup
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}          # <-- Use environment secrets here
    container:
      image: ghcr.io/opentofu/opentofu:1.9.0
    strategy:
      matrix:
        include:
          - environment: development
            targets: 'core'
            TF_VAR_ENV: dev
          # - environment: production
          #   targets: 'core service'
          #   TF_VAR_ENV: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACCESS_ROLE }} # Use a secret for the role ARN
          role-session-name: Github
          aws-region: ${{ vars.AWS_REGION }}

      - name: Tofu init for all targets
        run: |
          for target in ${{ matrix.targets }}; do
            echo "Initializing Tofu for environment=${{ matrix.environment }}, target=$target"
            cd terraform/main/$target
            tofu init -backend-config=backend/${{ matrix.TF_VAR_ENV }}.tfbackend -input=false
            cd -

            echo "Packing init artifacts for $target"
            tar -czf ${target}-init.tgz -C terraform/main/$target .terraform .terraform.lock.hcl
          done

      - name: Upload all Tofu init artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tofu-init-${{ matrix.environment }}
          path: |
            core-init.tgz
            service-init.tgz

  destroy:
    if: github.ref == 'refs/heads/main' && github.event.inputs.run_destroy == 'true'
    runs-on: ubuntu-latest
    needs: initialize
    environment: ${{ matrix.environment }}
    container:
      image: ghcr.io/opentofu/opentofu:1.9.0
    strategy:
      matrix:
        include:
          - environment: development
            targets: 'core'
            TF_VAR_ENV: dev
          # - environment: production
          #   targets: 'core service'
          #   TF_VAR_ENV: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: AWS Authentication
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACCESS_ROLE }} # Use a secret for the role ARN
          role-session-name: Github
          aws-region: ${{ vars.AWS_REGION }}

      - name: Download tofu init artifacts
        uses: actions/download-artifact@v4
        with:
          name: tofu-init-${{ matrix.environment }}

      - name: Run tofu destroy for all targets
        run: |
          for target in ${{ matrix.targets }}; do
            echo "Extracting init for $target"
            mkdir -p terraform/main/$target
            tar -xzf ${target}-init.tgz -C terraform/main/$target

            echo "Running tofu destroy for $target"
            cd terraform/main/$target
            tofu destroy -auto-approve -var-file=vars/${{ matrix.TF_VAR_ENV }}.tfvars
            cd -
          done
